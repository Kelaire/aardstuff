<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, February 06, 2022, 9:25 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "EnemyStatus" generated by Plugin Wizard -->

<muclient>
<plugin
   name="EnemyStatus"
   author="Kelaire"
   id="eb2b74cc75966dea1c018dd6"
   language="Lua"
   purpose="Show JUST the enemy Status - For Shaelynne!"
   save_state="y"
   date_written="2022-02-06 09:24:49"
   requires="5.07"
   version="1.0"
   >
   
 <description trim="n">
<![CDATA[
.----------------------------------------------------------------------------.
|                            EnemyX Status Window                             |
|----------------------------------------------------------------------------|
|enemyx help -- Brings up the help section. (What you are reading now)        |
|                                                                            |
|enemyx show -- Start displaying the miniwindow.                              |
|enemyx hide -- Stop displaying the miniwindow.                               |
|enemyx status -- Resets miniwindow data.                                     |
|                                                                            |
'----------------------------------------------------------------------------'
]]>
</description>

</plugin>

<!--  Aliases  -->

<aliases>
	<alias script="ShowHelp" match="^enemyx( help)?$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ShowWindow" match="^enemyx show$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="HideWindow" match="^enemyx hide$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ResetWindow" match="^enemyx reset$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
</aliases>

<script>

<![CDATA[

require "serialize"
require "gmcphelper"

-- Window variables
local z_order_plugin = "462b665ecb569efbf261422f"
local dragStart = nil	
local window = {}
local colours = {
	header = "#474747",
}
local headerSize = 17

-- On install, reset, get data, and draw the window.
function OnPluginInstall()
	resetEnemyData()
	if (GetVariable("window") ~= nil) then	-- load saved variables if they exist
		luastmt = "obj = " .. GetVariable("window")
		assert (loadstring (luastmt or "")) ()		
		window = obj
	else
		SetWindowDefaults() -- load window defaults
	end					

	InitializeWindow()
end

function OnPluginBroadcast (msg, id, name, text)
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == 'char.status') then
			gmcpchar = gmcp("char")
			fighting = gmcpchar.status.enemy
			
			if fighting ~= "" and fighting ~= null then
				enemyName = gmcpchar.status.enemy
				enemyHP = gmcpchar.status.enemypct
				enemyData = enemyName .. " (" .. enemyHP .. "%)"
				enemyColor = "Red"
				Draw(window)
			else
				enemyData = "Not Fighting"
				enemyColor = "White"
				Draw(window)
			end
		end
	end
end

function OnPluginConnect()
	initialize_config = false
end

function OnPluginDisable()
	HideWindow()
end

-- Window Defaults
function SetWindowDefaults()
	window = {
		id = "window_" .. GetPluginID(),
		top = 10,
		left = 10,
		width = 300,
		height = 35,
		show = true,
		font = "defaultFont",
		fontFamily = "Consolas",
		fontSize = 9,
		fontColor = "white",
		borderColor = "lightgray",
		backgroundColor = "black"
	}
end

-- Initialize the Window
function InitializeWindow()
	WindowCreate(window.id, window.left, window.top, window.width, window.height, miniwin.pos_center_all, miniwin.create_keep_hotspots, ColourNameToRGB(window.backgroundColor))
	WindowFont(window.id, window.font, window.fontFamily, window.fontSize, false, false, false, false, 1, 0)
	WindowPosition(window.id, window.left, window.top, miniwin.pos_stretch_to_view, miniwin.create_absolute_location)	

	if (window.show) then
		WindowShow(window.id, window.show)				
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "boostMe", window.id)
		end
		Draw(window)
	end	
	CreateHotSpots()
end

-- Create the Hot Spots
function CreateHotSpots()
	WindowDeleteAllHotspots(window.id)

	-- Drag window
	WindowAddHotspot(window.id, "DragArea", 15, 0, window.width-15, headerSize, "", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
	WindowDragHandler(window.id, "DragArea", "dragmove", "dragrelease", 0)	

	-- Resize window
	WindowAddHotspot(window.id, "Resize", window.width-13, window.height-13, window.width-2, window.height-2,"", "", "", "", "mouseup", "Drag to resize", miniwin.cursor_nw_se_arrow, 0)
	WindowDragHandler(window.id, "Resize", "resizemove", "resizerelease", 0) 

	-- Close button (x)
	WindowAddHotspot(window.id, "CloseMiniwindow", window.width-15, 0, window.width, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)
end

-- Show the window
function ShowWindow()
	window.show = true
	WindowShow(window.id, true)
	if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
		CallPlugin(z_order_plugin, "boostMe", window.id)
	end
	Draw(window)
	CreateHotSpots()
	SaveWindow()	
end

-- Hide the window
function HideWindow()
	window.show = false
	WindowShow(window.id, false)
	Draw(window)
	SaveWindow()
end	

-- Reset to defaults
function ResetWindow()
	SetWindowDefaults()		
	SaveWindow()	
	InitializeWindow()				
	Draw(window)
end

-- Save save save!
function SaveWindow()
	SetVariable("window", serialize.save_simple(window))
end	

-- Let's do the thing and draw the window!
function Draw(win)
	-- miniwin background
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, win.width, win.height, ColourNameToRGB(window.backgroundColor))	
	
	-- resize bars
	WindowLine(win.id, win.width-3,  win.height-2, win.width-2, win.height-3, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-4,  win.height-2, win.width-2, win.height-4, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-6,  win.height-2, win.width-2, win.height-6, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-7,  win.height-2, win.width-2, win.height-7, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-9,  win.height-2, win.width-2, win.height-9, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-10, win.height-2, win.width-2, win.height-10, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-12, win.height-2, win.width-2, win.height-12, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-13, win.height-2, win.width-2, win.height-13, ColourNameToRGB(window.backgroundColor), 0, 1)
	
	-- Header
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, window.width, headerSize, ColourNameToRGB(colours.header))
	WindowText(win.id, win.font, "Enemy Status", (window.width)/2-(WindowTextWidth(win.id, win.font, "Enemy Status")/2), 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "x", window.width-15, 3, 0, 0, ColourNameToRGB("white"), true)

	-- Window outline
	WindowRectOp(win.id, miniwin.rect_3d_rect , 0, 0, win.width, win.height, ColourNameToRGB(window.borderColor), ColourNameToRGB(window.borderColor))
	
	-- Window Text (Status Type)
	WindowText(win.id, win.font, enemyData, 5, 20, 0, 0, ColourNameToRGB(enemyColor), true)

end	

-- Handlers
function dragmove(flags, hotspot_id)							
	if (not dragStart) then
		dragStart = {
			x = WindowInfo(window.id, 14),
			y = WindowInfo(window.id, 15),
		}
	end		
	
	WindowPosition(window.id, 
					WindowInfo(window.id, 17) - dragStart.x, 
					WindowInfo(window.id, 18) - dragStart.y, 
					miniwin.pos_stretch_to_view, 
					miniwin.create_absolute_location)
end

function dragrelease(flags, hotspot_id)		
	window.left = WindowInfo(window.id, 10)
	window.top = WindowInfo(window.id, 11)
	
	dragStart = nil
	
	SaveWindow()
end

function resizemove(flags, hotspot_id) 
	window.width = WindowInfo(window.id, 17) - WindowInfo(window.id, 10)
	window.height = WindowInfo(window.id, 18) - WindowInfo(window.id, 11)
	
	WindowResize(window.id, window.width, window.height, ColourNameToRGB("gray"))
	WindowShow(window.id, true)
end

function resizerelease(flags, hotspot_id)
	SaveWindow()
	Draw(window)
	CreateHotSpots()
end

function mouseup(flags, hotspot_id)	
	if (bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0) then
		local result = WindowMenu(window.id, 
			WindowInfo(window.id, 14),
			WindowInfo(window.id, 15),
			"Bring to front|Send to back")		
		
		if (result ~= "" and IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			if result == "Send to back" then 
				CallPlugin(z_order_plugin, "dropMe", window.id)
			else
				CallPlugin(z_order_plugin, "boostMe", window.id)
			end
		end
	end
end

function buttonmouseup(flags, hotspot_id)
	if hotspot_id == "DisplayHelp" then
		ShowHelp()
	elseif hotspot_id == "CloseMiniwindow" then
		HideWindow()
	end
end

function ShowHelp()
	ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
end


-- DATA Stuff
function resetEnemyData()
	enemyData = "Not Fighting"
	enemyColor = "White"
end

]]>

</script>

</muclient>
