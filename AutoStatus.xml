<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, January 31, 2022, 7:06 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "AutoStatus" generated by Plugin Wizard -->

<muclient>
<plugin
   name="AutoXStatus"
   author="Kelaire"
   id="0ce449857633f49a1f588569"
   language="Lua"
   purpose="Show &quot;auto&quot; statuses in a miniwindow"
   date_written="2022-01-31 19:06:12"
   requires="5.07"
   version="1.0"
   >

<description trim="n">
<![CDATA[
.----------------------------------------------------------------------------.
|                            AutoX Status Window                             |
|----------------------------------------------------------------------------|
|autox help -- Brings up the help section. (What you are reading now)        |
|                                                                            |
|autox show -- Start displaying the miniwindow.                              |
|autox hide -- Stop displaying the miniwindow.                               |
|autox status -- Resets miniwindow data.                                     |
|                                                                            |
'----------------------------------------------------------------------------'
]]>
</description>


</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

  <trigger
   enabled="n"
   match="You do not page long messages."
   script="noPageSize"
   omit_from_output="y"
   sequence="100"
   group="pagecapturekel"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="You currently display (?<pageNum>.*) lines per page\."
   script="getPageSize"
   regexp="y"
   omit_from_output="y"
   sequence="100"
   group="pagecapturekel"
  >
  </trigger>

  <trigger
   enabled="y"
   match="{kelstatus}"
   regexp="n"
   script="startCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/kelstatus}"
   regexp="n"
   script="endCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="autostatus"
   match=".*"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="autostatus"
   match="^AUTOASSIST\s+Assist group members in mob combat\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="autoAssStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="autostatus"
   match="^AUTOLOOT\s+Automatically take equipment from enemy corpses\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="autoLootStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="autostatus"
   match="^AUTOPK\s+Assist group members in PK combat\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="autoPKStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="autostatus"
   match="^AUTOSAC\s+Automatically sacrifice enemy corpses\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="autoSacStatus"
   sequence="100"
  >
  </trigger> 
  
<!-- Auto Assist Captures --> 
  <trigger
   enabled="y"
   match="^You will now assist when needed\.$"
   regexp="y"
   script="autoAssOn"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^Autoassist removed\.$"
   regexp="y"
   script="autoAssOff"
   sequence="100"
  >
  </trigger>
 
<!-- Auto PK Captures -->  
  <trigger
   enabled="y"
   match="^You will now assist in PK fights\.$"
   regexp="y"
   script="autoPKOn"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^Autoassist removed from PK fights\.$"
   regexp="y"
   script="autoPKOff"
   sequence="100"
  >
  </trigger>

<!-- Auto Sac Captures --> 
  <trigger
   enabled="y"
   match="^You will no longer automatically sacrifice corpses\.$"
   regexp="y"
   script="autoSacOff"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You will now automatically sacrifice corpses\.$"
   regexp="y"
   script="autoSacOn"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Autosacrifice was also turned on\.$"
   regexp="y"
   script="autoSacOn"
   sequence="100"
  >
  </trigger>

  
<!-- Auto Loot Captures -->  
  <trigger
   enabled="y"
   match="^You will no longer autoloot items from corpses\.$"
   regexp="y"
   script="autoLootOff"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You will now autoloot items from corpses\.$"
   regexp="y"
   script="autoLootOn"
   sequence="100"
  >
  </trigger>


</triggers>

<!--  Aliases  -->

<aliases>
	<alias script="configSend" match="^autox status$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ShowHelp" match="^autox( help)?$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ShowWindow" match="^autox show$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="HideWindow" match="^autox hide$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ResetWindow" match="^autox reset$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
</aliases>


<script>

<![CDATA[

require "serialize"
require "wait"

-- Window variables
local z_order_plugin = "462b665ecb569efbf261422f"
local dragStart = nil	
local window = {}
local colours = {
	header = "#474747",
}
local headerSize = 20
local currentPageSize = 0 

-- On install, reset, get data, and draw the window.
function OnPluginInstall()
	wait.make (function()
			EnableTriggerGroup ("pagecapturekel", true)
            SendNoEcho("pagesize")
			wait.time(.5)
			EnableTriggerGroup ("pagecapturekel", false)
			wait.time(.5)
			SendNoEcho("pagesize 0")
			wait.time(.5)
			resetAutoData()
			if (GetVariable("window") ~= nil) then	-- load saved variables if they exist
				luastmt = "obj = " .. GetVariable("window")
				assert (loadstring (luastmt or "")) ()		
				window = obj
			else
				SetWindowDefaults() -- load window defaults
			end					

			InitializeWindow()
    end)
end

function OnPluginBroadcast (msg, id, name, text)
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == 'comm.tick') then
			if initialize_config then
				return
			else
				configSend()
				initialize_config = true
			end
		end
	end
end

function OnPluginConnect()
	initialize_config = false
end

function OnPluginDisable()
	HideWindow()
end

function OnPluginClose()
    OnPluginDisable()
end

function getPageSize(name, line, args)
	currentPageSize = args.pageNum
	ColourNote("red","","Pagesize: " .. currentPageSize)
end

function noPageSize(name, line, args)
	currentPageSize = 0
end

-- Window Defaults
function SetWindowDefaults()
	window = {
		id = "window_" .. GetPluginID(),
		top = 10,
		left = 10,
		width = 150,
		height = 75,
		show = true,
		font = "defaultFont",
		fontFamily = "Consolas",
		fontSize = 9,
		fontColor = "white",
		borderColor = "lightgray",
		backgroundColor = "black"
	}
end

-- Initialize the Window
function InitializeWindow()
	WindowCreate(window.id, window.left, window.top, window.width, window.height, miniwin.pos_center_all, miniwin.create_keep_hotspots, ColourNameToRGB(window.backgroundColor))
	WindowFont(window.id, window.font, window.fontFamily, window.fontSize, false, false, false, false, 1, 0)
	WindowPosition(window.id, window.left, window.top, miniwin.pos_stretch_to_view, miniwin.create_absolute_location)	

	if (window.show) then
		WindowShow(window.id, window.show)				
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "boostMe", window.id)
		end
		Draw(window)
	end	
	CreateHotSpots()
end

-- Create the Hot Spots
function CreateHotSpots()
	WindowDeleteAllHotspots(window.id)

	-- Drag window
	WindowAddHotspot(window.id, "DragArea", 15, 0, window.width-15, headerSize, "", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
	WindowDragHandler(window.id, "DragArea", "dragmove", "dragrelease", 0)	

	-- Resize window
	WindowAddHotspot(window.id, "Resize", window.width-13, window.height-13, window.width-2, window.height-2,"", "", "", "", "mouseup", "Drag to resize", miniwin.cursor_nw_se_arrow, 0)
	WindowDragHandler(window.id, "Resize", "resizemove", "resizerelease", 0) 

	-- Help button (?)
	WindowAddHotspot(window.id, "DisplayHelp", 0, 0, 15, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)

	-- Close button (x)
	WindowAddHotspot(window.id, "CloseMiniwindow", window.width-15, 0, window.width, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)
end

-- Show the window
function ShowWindow()
	window.show = true
	WindowShow(window.id, true)
	if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
		CallPlugin(z_order_plugin, "boostMe", window.id)
	end
	Draw(window)
	CreateHotSpots()
	SaveWindow()	
end

-- Hide the window
function HideWindow()
	window.show = false
	WindowShow(window.id, false)
	Draw(window)
	SaveWindow()
end	

-- Reset to defaults
function ResetWindow()
	SetWindowDefaults()		
	SaveWindow()	
	InitializeWindow()				
	Draw(window)
end

-- Save save save!
function SaveWindow()
	SetVariable("window", serialize.save_simple(window))
end	

-- Let's do the thing and draw the window!
function Draw(win)
	-- miniwin background
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, win.width, win.height, ColourNameToRGB(window.backgroundColor))	
	
	-- resize bars
	WindowLine(win.id, win.width-3,  win.height-2, win.width-2, win.height-3, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-4,  win.height-2, win.width-2, win.height-4, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-6,  win.height-2, win.width-2, win.height-6, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-7,  win.height-2, win.width-2, win.height-7, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-9,  win.height-2, win.width-2, win.height-9, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-10, win.height-2, win.width-2, win.height-10, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-12, win.height-2, win.width-2, win.height-12, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-13, win.height-2, win.width-2, win.height-13, ColourNameToRGB(window.backgroundColor), 0, 1)
	
	-- Header
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, window.width, headerSize, ColourNameToRGB(colours.header))
	WindowText(win.id, win.font, "AutoX Status", (window.width)/2-(WindowTextWidth(win.id, win.font, "AutoX Status")/2), 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "x", window.width-15, 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "?", 5, 3, 0, 0, ColourNameToRGB("white"), true)

	-- Window outline
	WindowRectOp(win.id, miniwin.rect_3d_rect , 0, 0, win.width, win.height, ColourNameToRGB(window.borderColor), ColourNameToRGB(window.borderColor))
	
	-- Window Text (Status Type)
	WindowText(win.id, win.font, "AutoAssist", 5, 20, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "AutoPK", 5, 32, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "AutoLoot", 5, 44, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "AutoSac", 5, 56, 0, 0, ColourNameToRGB(bgColor), true)
	
	-- Window Text (Statuses)
	WindowText(win.id, win.font, AAStatus, 100, 20, 0, 0, ColourNameToRGB(AAcolor), true)
	WindowText(win.id, win.font, APKStatus, 100, 32, 0, 0, ColourNameToRGB(APKcolor), true)
	WindowText(win.id, win.font, ALStatus, 100, 44, 0, 0, ColourNameToRGB(ALcolor), true)
	WindowText(win.id, win.font, ASStatus, 100, 56, 0, 0, ColourNameToRGB(AScolor), true)
	
end	

-- Handlers
function dragmove(flags, hotspot_id)							
	if (not dragStart) then
		dragStart = {
			x = WindowInfo(window.id, 14),
			y = WindowInfo(window.id, 15),
		}
	end		
	
	WindowPosition(window.id, 
					WindowInfo(window.id, 17) - dragStart.x, 
					WindowInfo(window.id, 18) - dragStart.y, 
					miniwin.pos_stretch_to_view, 
					miniwin.create_absolute_location)
end

function dragrelease(flags, hotspot_id)		
	window.left = WindowInfo(window.id, 10)
	window.top = WindowInfo(window.id, 11)
	
	dragStart = nil
	
	SaveWindow()
end

function resizemove(flags, hotspot_id) 
	window.width = WindowInfo(window.id, 17) - WindowInfo(window.id, 10)
	window.height = WindowInfo(window.id, 18) - WindowInfo(window.id, 11)
	
	WindowResize(window.id, window.width, window.height, ColourNameToRGB("gray"))
	WindowShow(window.id, true)
end

function resizerelease(flags, hotspot_id)
	SaveWindow()
	Draw(window)
	CreateHotSpots()
end

function mouseup(flags, hotspot_id)	
	if (bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0) then
		local result = WindowMenu(window.id, 
			WindowInfo(window.id, 14),
			WindowInfo(window.id, 15),
			"Bring to front|Send to back")		
		
		if (result ~= "" and IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			if result == "Send to back" then 
				CallPlugin(z_order_plugin, "dropMe", window.id)
			else
				CallPlugin(z_order_plugin, "boostMe", window.id)
			end
		end
	end
end

function buttonmouseup(flags, hotspot_id)
	if hotspot_id == "DisplayHelp" then
		ShowHelp()
	elseif hotspot_id == "CloseMiniwindow" then
		HideWindow()
	end
end

function ShowHelp()
	ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
end


-- DATA Stuff
function resetAutoData()
	AAStatus = '';
	APKStatus = '';
	ALStatus = '';
	ASStatus = '';
	AAcolor = '#2ae4f5';
	APKcolor = '#2ae4f5';
	ALcolor = '#2ae4f5';
	AScolor = '#2ae4f5';
	bgColor = '#2ae4f5';
	
	configSend()
	
	SendNoEcho("pagesize " .. currentPageSize)
end

-- Update the window
function configSend(name, line, args)
	    wait.make (function()
            wait.time(2)
			SendNoEcho("echo {kelstatus}")
			SendNoEcho("config")
			SendNoEcho("echo {/kelstatus}") 
    end)

end

-- Start the capture of the config output
function startCapture(name, line, args)
	EnableTriggerGroup ("autostatus", true)
end

-- End the capture of the config output and draw the window
function endCapture(name, line, args)
	EnableTriggerGroup ("autostatus", false)
	Draw(window)
end

-- get status of autoSac
function autoSacStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "YES" then 
		AScolor = "#38f52a"
		ASStatus = "ON"
	elseif flag == "NO" then 
		AScolor = "#f52a2a"
		ASStatus = "OFF"
	else 
		AScolor = "#2ae4f5"
		ASStatus = "ERROR"
	end
	
	ColourNote("Green","","Autosac: " .. ASStatus)
end

-- Get status of AutoPK
function autoPKStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "YES" then 
		APKcolor = "#38f52a"
		APKStatus = "ON"
	elseif flag == "NO" then 
		APKcolor = "#f52a2a"
		APKStatus = "OFF"
	else 
		APKcolor = "#2ae4f5"
		APKStatus = "ERROR"
	end
	
	ColourNote("Green","","AutoPK: " .. APKStatus)
end

-- Get status of AutoAssist
function autoAssStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "YES" then 
		AAcolor = "#38f52a"
		AAStatus = "ON"
	elseif flag == "NO" then 
		AAcolor = "#f52a2a"
		AAStatus = "OFF"
	else 
		AAcolor = "#2ae4f5"
		AAStatus = "ERROR"
	end
	
	ColourNote("Green","","Autoass: " .. AAStatus)
end

-- Get status of Autoloot
function autoLootStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "YES" then 
		ALcolor = "#38f52a"
		ALStatus = "ON"
	elseif flag == "NO" then 
		ALcolor = "#f52a2a"
		ALStatus = "OFF"
	else 
		ALcolor = "#2ae4f5"
		ALStatus = "ERROR"
	end
	
	ColourNote("Green","","Autoloot: " .. ALStatus)
end

-- Helper functions to set the auto features when user sets them and update the window
function autoAssOn(name, line, args)
	AAStatus = "ON"
	AAcolor = "#38f52a"
	Draw(window)
end

function autoPKOn(name, line, args)
	APKStatus = "ON"
	APKcolor = "#38f52a"
	Draw(window)
end

function autoSacOn(name, line, args)
	ASStatus = "ON"
	AScolor = "#38f52a"
	Draw(window)
end

function autoLootOn(name, line, args)
	ALStatus = "ON"
	ALcolor = "#38f52a"
	Draw(window)
end

function autoAssOff(name, line, args)
	AAStatus = "OFF"
	AAcolor = "#f52a2a"
	Draw(window)
end

function autoPKOff(name, line, args)
	APKStatus = "OFF"
	APKcolor = "#f52a2a"
	Draw(window)
end

function autoSacOff(name, line, args)
	ASStatus = "OFF"
	AScolor = "#f52a2a"
	Draw(window)
end

function autoLootOff(name, line, args)
	ALStatus = "OFF"
	ALcolor = "#f52a2a"
	Draw(window)
end


]]>

</script>

</muclient>
